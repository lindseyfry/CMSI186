"running TupleTestHarnesses for evaluation....." 
Test 01    : testing Tuple.IMPOSSIBLE.toString():
  Expecting: 'Impossible tuple': success
Test 02    : testing if Tuple.IMPOSSIBLE returns isImpossible():
  Expecting: 'true': success
Test 03    : testing if '<>' [empty Tuple] equals fakeImpossible.toString():
  Expecting: 'true': success
Test 04    : testing if fakeImpossible equals Tuple.IMPOSSIBLE:
  Expecting: 'true': success
Test 05    : testing if fakeImpossible returns isImpossible:
  Expecting: 'true': success
Test 06    : testing constructing '<>' [empty Tuple]:
  Expecting: 'true': success
Test 07    : testing constructing '<0>' [one-Tuple]:
  Expecting: 'true': success
Test 08    : testing constructing '<0,0>' [two-Tuple]:
  Expecting: 'true': success
Test 09    : testing constructing '<3,1,2>' [three-Tuple]:
  Expecting: 'true': success
Test 10    : testing constructing '<13,11,23,19,5,29>' [six-Tuple]:
  Expecting: 'true': success
Test 11    : testing constructing '<17,53,29,31,5,7,11,47,19,71>' [ten-Tuple]:
  Expecting: 'true': success
Test 12    : testing setting element zero of '<3,1,2>' [three-Tuple] to -1:
  currently: <3,1,2>
  Expecting: '<-1,1,2>': success
Test 13    : testing setting element one of '<-1,1,2>' [three-Tuple] to 0:
  currently: <-1,1,2>
  Expecting: '<-1,0,2>': success
Test 14    : testing setting element two of '<-1,0,2>' [three-Tuple] to 15:
  currently: <-1,0,2>
  Expecting: '<-1,0,15>': success
Test 15    : testing Tuple addition of '<-1,0,2>' to '<3,1,2>':
  currently: t0 is <-1,0,2>
  currently: t1 is <3,1,2>
  Expecting: Tuple sum is '<2,1,4>': success
Test 16    : testing Tuple equals 'some string object':
  Expecting: 'some string object': success
Test 17    : testing Tuple equals <-1.0>:
  Expecting: '<-1.0>': success
Test 18    : testing Tuple equals new Tuple(3):
  Expecting: t0 not equal new Tuple(3): success
Test 19    : testing Tuples are equal both ways:
  Expecting: t0.equals(t1) and t1.equals(t0) to be true: success
Test 20    : testing getElement zero of t0:
  Expecting: -1: success
Test 21    : testing getElement one of t0:
  Expecting: 0: success
Test 22    : testing getElement two of t0:
  Expecting: 2: success
Test 23    : testing length on empty Tuple:
  Expecting: length == 0: success
Test 24    : testing length on three-Tuple <-1,0,2>:
  Expecting: length == 3: success
Test 25    : testing length on '<13,11,23,19,5,29>' [six-Tuple]:
  Expecting: 'true': success
Test 26    : testing length on '<17,53,29,31,5,7,11,47,19,71>' [ten-Tuple]:
  Expecting: 'true': success
Test 27    : testing total on empty Tuple:
  Expecting: total == 0: success
Test 28    : testing total on three-Tuple <-1,0,2>:
  Expecting: total == 1: success
Test 29    : testing total on Tuple.IMPOSSIBLE:
  Expecting: total == 0: success
Test 30    : testing isImpossible on Tuple.IMPOSSIBLE:
  Expecting: true: success
Test 31    : testing isImpossible on Tuple <23,37,41>:
  Expecting: false: success
Test 32    : testing hashCode on Tuple.IMPOSSIBLE:
  Expecting: zero: success
Test 33    : testing hashCode on Tuple <23,37,41>:
  Expecting: 34891: success


Results: 33/33 tests passed.
. 
. 
"running DynamicChangemakerTestHarness for evaluation....." 
. 
. 
. 
"running standalone programs to test extra credit operations" 
. 
"running java DynamicChangeMaker 8,13,4,9 14" 
It is impossible to make 14 cents with those denominations.
. 
"running java DynamicChangeMaker 2,3 5" 
5 cents can be made with 2 coins as follows:
- 1 2-cent coin
- 1 3-cent coin
. 
"running java DynamicChangeMaker 2,3,7,5,51,29,11 13579" 
13579 cents can be made with 268 coins as follows:
- 1 2-cent coin
- 0 3-cent coins
- 0 7-cent coins
- 0 5-cent coins
- 266 51-cent coins
- 0 29-cent coins
- 1 11-cent coin
. 
"running java DynamicChangeMaker 17,23,121,47,3 13579" 
13579 cents can be made with 117 coins as follows:
- 3 17-cent coins
- 0 23-cent coins
- 111 121-cent coins
- 2 47-cent coins
- 1 3-cent coin
. 
"running java DynamicChangeMaker 1,7,9 12" 
12 cents can be made with 4 coins as follows:
- 3 1-cent coins
- 0 7-cent coins
- 1 9-cent coin
. 
"running java DynamicChangeMaker 11,13,17,19,23 1357911" 
1357911 cents can be made with 59041 coins as follows:
- 1 11-cent coin
- 2 13-cent coins
- 0 17-cent coins
- 0 19-cent coins
- 59038 23-cent coins
. 
"running java DynamicChangeMaker 23,19,17,13,11 1357911" 
1357911 cents can be made with 59041 coins as follows:
- 59037 23-cent coins
- 2 19-cent coins
- 0 17-cent coins
- 0 13-cent coins
- 2 11-cent coins
. 
"running java DynamicChangeMaker 3,1,9,8 14" 
14 cents can be made with 3 coins as follows:
- 2 3-cent coins
- 0 1-cent coins
- 0 9-cent coins
- 1 8-cent coin
. 
"running java DynamicChangeMaker 3" 
Usage: java ChangeMaker <denominations> <amount>
  - <denominations> is a comma-separated list of denominations (no spaces)
  - <amount> is the amount for which to make change
. 
"running java DynamicChangeMaker 3,12 -4" 
Change cannot be made for negative amounts.

Usage: java ChangeMaker <denominations> <amount>
  - <denominations> is a comma-separated list of denominations (no spaces)
  - <amount> is the amount for which to make change
. 
"running java DynamicChangeMaker 0,12,3 63" 
Denominations must all be greater than zero.

Usage: java ChangeMaker <denominations> <amount>
  - <denominations> is a comma-separated list of denominations (no spaces)
  - <amount> is the amount for which to make change
. 
"running java DynamicChangeMaker 10,12,3,12 63" 
Duplicate denominations are not allowed.

Usage: java ChangeMaker <denominations> <amount>
  - <denominations> is a comma-separated list of denominations (no spaces)
  - <amount> is the amount for which to make change
. 
. 
...........done.............. 
. 
