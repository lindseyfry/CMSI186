/**
 *  File name     :  CalendarStuff.java
 *  Purpose       :  Provides a class with supporting methods for CountTheDays.java program
 *  Author        :  B.J. Johnson (prototype)
 *  Date          :  2017-01-02 (prototype)
 *  Author        :  <Lindsey Fry>
 *  Date          :  <January 21, 2018>
 *  Description   :  This file provides the supporting methods for the CountTheDays program which will
 *                   calculate the number of days between two dates.  It shows the use of modularization
 *                   when writing Java code, and how the Java compiler can "figure things out" on its
 *                   own at "compile time".  It also provides examples of proper documentation, and uses
 *                   the source file header template as specified in the "Greeter.java" template program
 *                   file for use in CMSI 186, Spring 2017.
 *  Notes         :  None
 *  Warnings      :  None
 *  Exceptions    :  None
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  Revision History
 *  ----------------
 *            Rev      Date     Modified by:  Reason for change/modification
 *           -----  ----------  ------------  -----------------------------------------------------------
 *  @version 1.0.0  2017-01-02  B.J. Johnson  Initial writing and release
 *  @version 1.0.1  2017-12-25  B.J. Johnson  Updated for Spring 2018
 */
public class CalendarStuff {

  /**
   * A listing of the days of the week, assigning numbers; Note that the week arbitrarily starts on Sunday
   */
   private static final int SUNDAY    = 0;
   private static final int MONDAY    = SUNDAY    + 1;
   private static final int TUESDAY   = SUNDAY    + 2;
   private static final int WEDNESDAY = SUNDAY    + 3;
   private static final int THURSDAY  = SUNDAY    + 4;
   private static final int FRIDAY    = SUNDAY    + 5;
   private static final int SATURDAY  = SUNDAY    + 6;
   
  // you can finish the rest on your own
  
  /**
   * A listing of the months of the year, assigning numbers; I suppose these could be ENUMs instead, but whatever
   */
   private static final int JANUARY    = 0;
   private static final int FEBRUARY   = JANUARY   + 1;
   private static final int MARCH      = JANUARY   + 2;
   private static final int APRIL      = JANUARY   + 3;
   private static final int MAY        = JANUARY   + 4;
   private static final int JUNE       = JANUARY   + 5;
   private static final int JULY       = JANUARY   + 6;
   private static final int AUGUST     = JANUARY   + 7;
   private static final int SEPTEMBER  = JANUARY   + 8;
   private static final int OCTOBER    = JANUARY   + 9;
   private static final int NOVEMBER   = JANUARY   + 10;
   private static final int DECEMBER   = JANUARY   + 11;
  // you can finish these on your own, too
  
  /**
   * An array containing the number of days in each month
   *  NOTE: this excludes leap years, so those will be handled as special cases
   *  NOTE: this is optional, but suggested
   */
   private static int[] daysOfTheMonth  = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  /**
   * The constructor for the class
   */
   public CalendarStuff() {
      System.out.println( "Constructor called..." );  // replace this with the actual code
   }

  /**
   * A method to determine if the year argument is a leap year or not<br />
   *  Leap years are every four years, except for even-hundred years, except for every 400
   * @param    year  long containing four-digit year
   * @return         boolean which is true if the parameter is a leap year
   */
   public static boolean isLeapYear( long year ) {
       if (year % 4 == 0 && year % 100 != 0){
           return true;
       } 
       else if(year % 400 == 0){
           return true;
       }
       else{
           return false;
       }
   }

  /**
   * A method to calculate the days in a month, including leap years
   * @param    month long containing month number, starting with "1" for "January"
   * @param    year  long containing four-digit year; required to handle Feb 29th
   * @return         long containing number of days in referenced month of the year
   * notes: remember that the month variable is used as an indix, and so must
   *         be decremented to make the appropriate index value
   */
   public static long daysInMonth( long month, long year ) {
       if (month < 1 || month > 12) {
           return 0;
       }
       if(isLeapYear(year) && year == 2){
           return 29;
       }
       return daysOfTheMonth[ (int)month - 1 ];
       
   }

  /**
   * A method to determine if two dates are exactly equal
   * @param    month1 long    containing month number, starting with "1" for "January"
   * @param    day1   long    containing day number
   * @param    year1  long    containing four-digit year
   * @param    month2 long    containing month number, starting with "1" for "January"
   * @param    day2   long    containing day number
   * @param    year2  long    containing four-digit year
   * @return          boolean which is true if the two dates are exactly the same
   */
   public static boolean dateEquals( long month1, long day1, long year1, long month2, long day2, long year2 ) {
      if(year1 == year2){
          if(month1 == month2){
              if(day1 == day2){
                  return true;
              }
          }
      } 
      return false;
      
  }


  /**
   * A method to compare the ordering of two dates
   * @param    month1 long   containing month number, starting with "1" for "January"
   * @param    day1   long   containing day number
   * @param    year1  long   containing four-digit year
   * @param    month2 long   containing month number, starting with "1" for "January"
   * @param    day2   long   containing day number
   * @param    year2  long   containing four-digit year
   * @return          int    -1/0/+1 if first date is less than/equal to/greater than second
   */
   public static int compareDate( long month1, long day1, long year1, long month2, long day2, long year2 ) {
       if (dateEquals(month1, day1, year1, month2, day2, year2)){
           return 0;
       }
       if(year1 > year2){
           return 1;
       } else if(year1 < year2){
           return -1;
       } else {
           if(month1 > month2){
               return 1;
           } else if(month1 < month2){
               return -1;
           } else{
               if(day1 > day2){
                   return 1;
               } else if(day1 < day2){
                   return -1;
               }              
           } 
             
      }
      return 0;
  }

  /**
   * A method to return whether a date is a valid date
   * @param    month long    containing month number, starting with "1" for "January"
   * @param    day   long    containing day number
   * @param    year  long    containing four-digit year
   * @return         boolean which is true if the date is valid
   * notes: remember that the month and day variables are used as indices, and so must
   *         be decremented to make the appropriate index value
   */
   public static boolean isValidDate( long month, long day, long year ) {
       int daysInTheMonth = (int) daysInMonth(month, year);
       if (isLeapYear(year) && month == 2) {
           daysInTheMonth = 29;
       }
       if (year <= 0) {
           return false;
       }
       if (month < 1 || month > 12) {
           return false;
       }
       if (day < 1 || day > daysInTheMonth) {
           return false;
       }
       return true;
       

  /**
   * A method to return a string version of the month name
   * @param    month long   containing month number, starting with "1" for "January"
   * @return         String containing the string value of the month (no spaces)
   */
   public static String toMonthString( int month ) {
       String NameMonth = "";
      switch( month - 1 ) {
          case JANUARY: 
          NameMonth = "January";
          break;
          
          case FEBRUARY: 
          NameMonth = "February";
          break;
          
          case MARCH: 
          NameMonth = "March";
          break;
          
          case APRIL: 
          NameMonth = "April";
          break;
          
          case MAY: 
          NameMonth = "May";   
          break;
          
          case JUNE: 
          NameMonth = "June";     
          break;
          
          case JULY: 
          NameMonth = "July";   
          break;
          
          case AUGUST: 
          NameMonth = "August";   
          break;
          
          case SEPTEMBER: 
          NameMonth = "September";   
          break;
          
          case OCTOBER: 
          NameMonth = "October";   
          break;
          
          case NOVEMBER: 
          NameMonth = "November";   
          break;
          
          case DECEMBER: 
          NameMonth = "December";   
          break;
          
         default: throw new IllegalArgumentException( "Illegal month value given to 'toMonthString()'." );
      }
      return NameMonth;
   }

  /**
   * A method to return a string version of the day of the week name
   * @param    day int    containing day number, starting with "1" for "Sunday"
   * @return       String containing the string value of the day (no spaces)
   */
   public static String toDayOfWeekString( int day ) {
       String NameDay = "";
      switch( day - 1 ) {
          case SUNDAY: 
          NameDay = "Sunday";
          break;
          
          case MONDAY: 
          NameDay = "Monday";
          break;
          
          case TUESDAY: 
          NameDay = "Tuesday";
          break;
          
          case WEDNESDAY: 
          NameDay = "Wednesday";
          break;
          
          case THURSDAY: 
          NameDay = "Thursday";   
          break;
          
          case FRIDAY: 
          NameDay = "Friday";     
          break;
          
          case SATURDAY: 
          NameDay = "Saturday";   
          break;
          
         default: throw new IllegalArgumentException( "Illegal day value given to 'toDayOfWeekString()'." );
      }
      return NameDay;
   }

  /**
   * A method to return a count of the total number of days between two valid dates
   * @param    month1 long   containing month number, starting with "1" for "January"
   * @param    day1   long   containing day number
   * @param    year1  long   containing four-digit year
   * @param    month2 long   containing month number, starting with "1" for "January"
   * @param    day2   long   containing day number
   * @param    year2  long   containing four-digit year
   * @return          long   count of total number of days
   */
   public static long daysBetween( long month1, long day1, long year1, long month2, long day2, long year2 ) {
      long dayCount = 0;
      //Check to make sure the dates are correct
      if(!checkDateInOrder(month1, day1, year1, month2, day2, year2)){
          long tempMonth = month1;
          month1 = month2;
          month2 = tempMonth;
          
          long tempDay = day1;
          day1 = day2;
          day2 = tempDay;
          
          long tempYear = year1;
          year1 = year2;
          year2 = tempYear;
      }
      while(true){
          if(dateEquals(month1, day1, year1, month2, day2, year2)){
              break;
          }
          if(isValidDate(month1, day1, year1)){
              day1++;
              dayCount++;
              //System.out.println(month1 + "/" + day1 + "/" + year1 + " // " + dayCount);
          }else{
              month1++;
              day1 = 1;
              if(!isValidDate(month1, day1, year1)){
                  month1 = 1;
                  year1++;
              }
          }
      }
      return dayCount;
  }
  
  public static boolean checkDateInOrder(long month1, long day1, long year1, long month2, long day2, long year2){
      if(year1 == year2){
          if(month1 == month2){
              if(day1 == day2){
                  return true;
              }else{
                  if(day1 < day2){
                      return true;
                  }else{
                      return false;
                  }
              }
          }else{
              if(month1 < month2){
                  return true;
              }else{
                  return false;
              }
          }
      }else{
          if(year1 < year2){
              return true;
          }else{
              return false;
          }
      }
  }
  
  public static void main (String [] args){
      System.out.println(daysBetween(  8, 15, 2005,  8, 15, 2006 )); //365
  }
}
